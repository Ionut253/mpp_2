generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(cuid())
  email           String          @unique
  password        String
  role            UserRole        @default(USER)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  twoFactorEnabled Boolean         @default(false)
  verificationCode    String?
  verificationExpiry DateTime?
  activityLogs    ActivityLog[]
  customer        Customer?
  monitoringAdded MonitoredUser[] @relation("MonitoringAddedBy")
  monitoredUsers  MonitoredUser[] @relation("MonitoredUser")

  @@index([email])
  @@index([role])
}

model Customer {
  id        String    @id @default(cuid())
  email     String    @unique
  phone     String?
  address   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  dob       DateTime?
  firstName String
  lastName  String
  userId    String?   @unique
  accounts  Account[]
  user      User?     @relation(fields: [userId], references: [id])

  @@index([firstName, lastName])
  @@index([createdAt])
}

model Account {
  id           String        @id @default(cuid())
  accountType  String
  balance      Float         @default(0)
  customerId   String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  customer     Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@index([customerId])
  @@index([accountType])
  @@index([createdAt])
  @@index([balance])
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Float
  type        String
  accountId   String
  createdAt   DateTime @default(now())
  description String?
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId])
  @@index([type])
  @@index([createdAt])
  @@index([amount])
}

model ActivityLog {
  id        String     @id @default(cuid())
  userId    String
  action    ActionType
  entity    String
  entityId  String
  details   String?
  timestamp DateTime   @default(now())
  user      User       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([entity])
  @@index([timestamp])
}

model MonitoredUser {
  id        String   @id @default(cuid())
  userId    String
  reason    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  addedById String
  addedBy   User     @relation("MonitoringAddedBy", fields: [addedById], references: [id])
  user      User     @relation("MonitoredUser", fields: [userId], references: [id])

  @@index([userId])
  @@index([isActive])
  @@index([createdAt])
}

enum UserRole {
  USER
  ADMIN
}

enum ActionType {
  CREATE
  READ
  UPDATE
  DELETE
}
