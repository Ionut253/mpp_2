// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  password          String
  role              UserRole          @default(USER)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  customer          Customer?
  activityLogs      ActivityLog[]
  monitoredUsers    MonitoredUser[]   @relation("MonitoredUser")
  monitoringAdded   MonitoredUser[]   @relation("MonitoringAddedBy")

  @@index([email])
  @@index([role])
}

model Customer {
  id        String    @id @default(cuid())
  firstName String
  lastName  String
  email     String    @unique
  phone     String?
  address   String?
  dob       DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  userId    String?   @unique
  user      User?     @relation(fields: [userId], references: [id])

  @@index([firstName, lastName])
  @@index([createdAt])
}

model Account {
  id          String        @id @default(cuid())
  accountType String      
  balance     Float       @default(0)
  customerId  String
  customer    Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  transactions Transaction[]

  @@index([customerId])
  @@index([accountType])
  @@index([createdAt])
  @@index([balance])
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Float
  type        String   
  accountId   String
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  description String?

  @@index([accountId])
  @@index([type])
  @@index([createdAt])
  @@index([amount])
}

enum ActionType {
  CREATE
  READ
  UPDATE
  DELETE
}

model ActivityLog {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  action    ActionType
  entity    String     
  entityId  String     
  details   String?    
  timestamp DateTime   @default(now())

  @@index([userId])
  @@index([action])
  @@index([entity])
  @@index([timestamp])
}

model MonitoredUser {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation("MonitoredUser", fields: [userId], references: [id])
  reason      String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  addedById   String
  addedBy     User      @relation("MonitoringAddedBy", fields: [addedById], references: [id])

  @@index([userId])
  @@index([isActive])
  @@index([createdAt])
}
